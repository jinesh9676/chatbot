from flask import Flask, render_template, request, jsonify

app = Flask(__name__)

# Predefined chatbot responses (Static Knowledge Base)
qaDatabase = {
    "What is Python?": "Python is an interpreted, high-level, general-purpose programming language known for its readability and versatility.",
    "How is Python interpreted?": "Python code is executed line by line at runtime, converting source code into an intermediate form called bytecode, which is then executed by the Python virtual machine (PVM).",
    "What are Python's key features?": "Python features include easy syntax, interpreted nature, dynamic typing, extensive libraries, object-oriented principles, and portability.",
    "What is PEP 8?": "PEP 8 is the Python Enhancement Proposal that provides guidelines and best practices for writing Python code, covering aspects like naming conventions and code layout.",
    "How do you manage memory in Python?": "Python uses automatic memory management and a garbage collector to handle memory, recycling it when objects are no longer in use.",
    "What are Python's data types?": "Standard data types in Python include Numeric (int, float, complex), Sequence (list, tuple, range), Text (str), Mapping (dict), Set (set, frozenset), Boolean (bool), and Binary (bytes, bytearray, memoryview).",
    "What is the difference between a list and a tuple?": "Lists are mutable (can be changed after creation), while tuples are immutable (cannot be changed after creation).",
    "How do you handle exceptions in Python?": "Exceptions are handled using the try-except block, where code that may raise an exception is placed inside try, and the handling code inside except.",
    "What is an iterator in Python?": "An iterator is an object that contains a countable number of values and can be iterated upon, implementing the methods __iter__() and __next__().",
    "What is the __init__() function in Python?": "The __init__() function is a constructor method in Python classes that is automatically executed when a new instance of the class is created, initializing the object's attributes.",
    "When should you use lambda functions in Python?": "Lambda functions are used when an anonymous function is required for a short period of time, especially as arguments to higher-order functions.",
    "What is the difference between lists, tuples, and sets?": "Lists are ordered and mutable, tuples are ordered and immutable, and sets are unordered collections with no duplicate elements.",
    "What is indentation in Python, and why is it important?": "Indentation refers to the spaces at the beginning of a code line. In Python, indentation is crucial as it defines the structure and flow of the code.",
    "What is the correct syntax to output the type of a variable or object in Python?": "The type of a variable or object can be output using the print(type(x)) function.",
    "What is the difference between global and local scope?": "A variable created inside a function belongs to the local scope of that function, while a variable created outside any function belongs to the global scope and can be accessed globally.",
    "What is slicing in Python?": "Slicing is a technique used to extract a portion of a sequence (like a list, tuple, or string) using a specified range of indices.",
    "What is a dynamically typed language?": "In a dynamically typed language, the data type of a variable is interpreted at runtime, meaning variables do not require an explicit declaration to reserve memory space.",
    "Is indentation required in Python?": "Yes, indentation is required in Python as it indicates a block of code, and improper indentation can lead to errors.",
    "What is a docstring in Python?": "A docstring is a string literal that appears as the first statement in a module, function, class, or method definition, used to document the purpose and usage of the code block.",
    "What are unit tests in Python?": "Unit tests are a way to test individual units of source code to determine if they are fit for use, typically written using the unittest module.",
    "What is the use of self in Python?": "The self parameter represents the instance of the class and is used to access variables that belong to the class.",
    "What is the difference between Python arrays and lists?": "Arrays can only contain elements of the same data type, while lists can contain elements of different data types.",
    "How can you make a Python script executable on Unix?": "By adding a shebang line (e.g., #!/usr/bin/env python3) at the beginning of the script and giving the file executable permissions using chmod.",
    "What is the difference between a shallow copy and a deep copy?": "A shallow copy creates a new object but inserts references into it to the objects found in the original, while a deep copy creates a new object and recursively adds copies of nested objects found in the original.",
    "How do you create a virtual environment in Python?": "A virtual environment can be created using the venv module by running python3 -m venv env_name.",
    "What is the difference between 'is' and '==' in Python?": "The '==' operator compares the values of two objects, while the 'is' operator compares whether two references point to the same object in memory.",
    "How do you manage packages in Python?": "Packages in Python are managed using tools like pip, which can install, update, and remove packages from the Python Package Index (PyPI).",
    "What is the difference between 'deepcopy()' and 'copy()' functions?": "The copy() function creates a shallow copy of an object, while deepcopy() creates a deep copy, recursively copying all objects found in the original.",
    "What are Python's built-in types?": "Python's built-in types include numeric types (int, float, complex), sequence types (list, tuple, range), text type (str), mapping type (dict), set types (set, frozenset), boolean type (bool)",
    "What is the difference between Python 2 and Python 3?": "Python 2 is legacy, while Python 3 is the future. Python 3 has better syntax, type hints, and Unicode support.",
    "How do you install an external package in Python?": "You can install packages using the pip command: pip install package_name.",
    "What are Python's built-in data structures?": "Python has lists, tuples, sets, and dictionaries as built-in data structures.",
    "What is a Python module?": "A module is a Python file containing definitions and statements that can be imported and reused.",
    "What is a Python package?": "A package is a collection of Python modules organized in a directory with an __init__.py file.",
    "How do you create a Python virtual environment?": "Use python -m venv env_name to create a virtual environment.",
    "What is a generator in Python?": "A generator is a function that returns an iterator and allows you to iterate over values one at a time using yield.",
    "What is the difference between a generator and an iterator?": "A generator is a simpler way to create iterators using the yield keyword.",
    "How do you reverse a string in Python?": "You can reverse a string using slicing: string[::-1].",
    "What is the difference between a class and an object?": "A class is a blueprint, and an object is an instance of a class.",
    "What is the difference between 'is' and '==' in Python?": "'is' checks for object identity, while '==' checks for value equality.",
    "How do you check the length of a list in Python?": "Use the len() function: len(my_list).",
    "What is a Python decorator?": "A decorator is a function that modifies the behavior of another function without modifying its code.",
    "What are Python’s conditional statements?": "Python supports if, elif, and else for conditional branching.",
    "What is the difference between 'in' and 'not in' in Python?": "'in' checks if an element exists in a sequence, 'not in' checks if it does not exist.",
    "What is a Python lambda function?": "A lambda function is a small anonymous function defined using the lambda keyword.",
    "What are Python’s logical operators?": "and, or, not",
    "What are Python’s membership operators?": "'in' and 'not in' are membership operators in Python.",
    "What is the difference between '==' and 'is'?": "'==' checks for value equality, while 'is' checks for reference equality.",
    "What is the range function in Python?": "The range() function returns a sequence of numbers within a specified range.",
    "What is the difference between return and yield?": "return ends the function and returns a value; yield pauses the function and can resume from the same point.",
    "How do you check if a variable exists in Python?": "Use the try-except block or the globals()/locals() function.",
    "What is the difference between pop() and remove() in lists?": "pop() removes an element by index and returns it, remove() removes the first occurrence of a value.",
    "How do you convert a list to a set?": "Use the set() function: set(my_list).",
    "How do you check if a key exists in a dictionary?": "Use the 'in' operator: key in my_dict.",
    "What is a Python namedtuple?": "A namedtuple is a class that allows you to create immutable objects with named fields.",
    "What is the difference between static methods and class methods?": "Static methods don't take self or cls; class methods take cls and can modify class state.",
    "What is the difference between sorted() and sort()?": "sorted() returns a new sorted list; sort() sorts the list in place.",
    "What is the difference between input() and raw_input()?": "input() reads input as a string; raw_input() is used in Python 2 to read strings.",
    "What is a frozenset in Python?": "A frozenset is an immutable set that cannot be modified after creation.",
    "What is the difference between __str__ and __repr__?": "__str__ returns a user-friendly string; __repr__ returns a developer-friendly string.",
    "How do you create a multiline string in Python?": "Use triple quotes: ''' or \"\"\".",
    "What is the difference between assert and raise in Python?": "assert is used for debugging; raise is used to manually raise an exception.",
    "What is a Python context manager?": "A context manager manages resources and closes them after use using 'with' statements.",
    "What is a Python closure?": "A closure is a function object that retains access to variables from its enclosing scope.",
    "What is the difference between deep copy and shallow copy?": "Deep copy creates a new object and recursively copies the original object; shallow copy creates a new object but inserts references.",
    "How do you combine two dictionaries in Python?": "Use the update() method or dictionary unpacking: {**dict1, **dict2}.",
    "What is the difference between @staticmethod and @classmethod?": "@staticmethod defines a static method; @classmethod defines a class method.",
    "What is the difference between list comprehension and generator expression?": "List comprehensions return a list; generator expressions return an iterator.",
    "How do you check for type in Python?": "Use the type() function or isinstance() function.",
    "What is Python used for?": "Python is used for web development, data analysis, artificial intelligence, machine learning, automation, and more.",
    "What is the Python Global Interpreter Lock (GIL)?": "The GIL is a mutex that protects access to Python objects, preventing multiple native threads from executing Python bytecodes simultaneously.",
    "What is the difference between a module and a script?": "A module is imported and used in other programs; a script is executed directly.",
    "How do you check if a list is empty?": "Use 'if not my_list' or 'if len(my_list) == 0'.",
    "What is a metaclass in Python?": "A metaclass is a class of a class that defines how a class behaves.",
    "What is the difference between dir() and help()?": "dir() returns a list of attributes of an object; help() returns detailed documentation.",
    "How can you copy a file in Python?": "Use the shutil module's copyfile() method.",
    "How do you handle circular imports in Python?": "Use local imports within functions or modules.",
    "What is a Python namespace?": "A namespace is a container that holds a set of identifiers and their references.",
    "What is the difference between a statement and an expression?": "An expression returns a value; a statement performs an action.",
    "What are Python’s built-in numeric types?": "int, float, and complex.",
    "What is the difference between __getattr__ and __getattribute__?": "__getattr__ is called when an attribute is not found; __getattribute__ is called for every attribute access.",
    "What is the purpose of the 'super' keyword in Python?": "The 'super' keyword is used to call a parent class's method or constructor.",
    "How do you check if a string contains only digits?": "Use the isdigit() method.",
    "What is the difference between '//' and '/' in Python?": "'//' performs floor division, '/' performs true division.",
    "What is the difference between a static method and an instance method?": "A static method does not require an instance; an instance method requires an instance.",
    "What is a Python singleton?": "A singleton is a design pattern that restricts the instantiation of a class to one object.",
    "What is the purpose of the 'with' statement in Python?": "The 'with' statement ensures proper acquisition and release of resources.",
    "What are Python’s comparison operators?": "==, !=, >, <, >=, <=",
    "What is the difference between map(), filter(), and reduce()?": "map() applies a function to each element; filter() returns elements that match a condition; reduce() reduces elements using a function.",
    "What is the difference between a function and a method?": "A function is independent; a method is attached to an object.",
    "What is the purpose of the pass statement?": "The pass statement does nothing; it is used as a placeholder.",
    "How do you create a new Python file?": "Create a new file with the .py extension.",
    "How can you measure the execution time of code in Python?": "Use the time module or the timeit module.",
    "What is the purpose of the 'del' keyword in Python?": "The 'del' keyword is used to delete objects or variables.",
    "How do you check if a variable is None?": "Use 'if var is None'.",
    "What is the difference between __new__ and __init__?": "__new__ creates a new instance; __init__ initializes the instance.",
    "What is the difference between *args and **kwargs?": "*args passes a variable number of positional arguments; **kwargs passes a variable number of keyword arguments.",
    "What is the difference between mutable and immutable objects?": "Mutable objects can be changed; immutable objects cannot be changed.",
    "What are Python’s bitwise operators?": "& (AND), | (OR), ^ (XOR), ~ (NOT), << (left shift), >> (right shift)",
    "How do you convert a string to an integer in Python?": "Use the int() function.",
    "What is the difference between isinstance() and type()?": "type() returns the type of an object; isinstance() checks if an object is an instance of a class.",
    "How do you convert a list to a tuple?": "Use the tuple() function.",
    "What is the difference between @property and a regular method?": "@property converts a method into a read-only attribute.",
    "What is the difference between shallow copy and deep copy?": "A shallow copy copies references; a deep copy creates independent copies.",
    "What is a Python closure?": "A closure is a function that retains access to variables from its lexical scope.",
    "What is the difference between a package and a library?": "A package is a collection of modules; a library is a collection of packages and modules.",
    "What is the difference between UTF-8 and ASCII?": "UTF-8 is a variable-length encoding; ASCII is a fixed-length encoding.",
    "What is the difference between a list and an array in Python?": "Lists can store mixed types; arrays require elements of the same type.",
    "What is the difference between @staticmethod and @classmethod?": "@staticmethod does not take cls; @classmethod takes cls and can modify class state.",
    "How do you create a list with a specific size?": "Use list comprehension or the * operator: [None] * size.",
    "What is the difference between range and xrange in Python?": "range() returns a list; xrange() returns an iterator (Python 2 only).",
    "What is the difference between os.remove() and os.unlink()?": "Both remove files, but os.unlink() is an alias for os.remove().",
    "How do you make a Python file executable?": "Add a shebang line and give execute permission: chmod +x file.py.",
    "What is the difference between Python arrays and NumPy arrays?": "NumPy arrays are faster and more memory-efficient than Python arrays.",
    "What is the purpose of the hash() function?": "The hash() function returns a hash value of an object.",
    "What is the difference between the split() and join() methods?": "split() breaks a string into a list; join() combines a list into a string.",
    "How do you create a dictionary from two lists?": "Use the zip() function: dict(zip(keys, values)).",
    "What is the difference between 'continue' and 'break' in loops?": "continue skips the current iteration; break exits the loop.",
    "How do you reverse a list in Python?": "Use the reverse() method or slicing: list[::-1].",
    "What is the difference between static typing and dynamic typing?": "Static typing requires declaring types; dynamic typing infers types at runtime.",
    "What is a Python bytecode?": "Bytecode is a low-level set of instructions that is executed by the Python virtual machine.",
    "What is the difference between None and False in Python?": "None represents the absence of a value; False is a boolean value representing falsehood.",
    "How do you merge two lists in Python?": "Use the + operator or the extend() method.",
    "What is the difference between __call__ and __init__?": "__call__ allows an instance to be called like a function; __init__ initializes an instance.",
    "What is a Python memoryview?": "memoryview creates a view of a buffer's memory without copying it.",
    "How do you create a named tuple in Python?": "Use the collections.namedtuple() function.",
    "What is the difference between % and format()?": "% is the old formatting style; format() is more flexible and modern.",
    "What is the difference between json.load() and json.loads()?": "json.load() reads from a file; json.loads() reads from a string.",
    "How do you round a float to two decimal places in Python?": "Use the round() function: round(value, 2).",
    "What is a Python property?": "A property is a special method that acts like an attribute using the @property decorator.",
    "What is the difference between get() and setdefault() in dictionaries?": "get() returns the value for a key; setdefault() sets a default value if the key is not present.",
    "What is the difference between seek() and tell()?": "seek() sets the file position; tell() returns the current file position.",
    "What is a Python context manager?": "A context manager is used with the 'with' statement to manage resources.",
    "What is a Python ABC (Abstract Base Class)?": "An ABC defines a set of methods that must be implemented in a subclass.",
    "What is the purpose of the assert statement?": "The assert statement is used for debugging to test conditions.",
    "What is the difference between a list and a tuple?": "Lists are mutable; tuples are immutable.",
    "How do you remove duplicates from a list?": "Convert the list to a set and back to a list.",
    "What is the difference between shallow and deep copies in Python?": "Shallow copies copy references; deep copies create independent copies.",
    "How do you convert a string to lowercase?": "Use the lower() method.",
    "How do you convert a string to uppercase?": "Use the upper() method.",
    "What is the difference between bytes and bytearray in Python?": "bytes are immutable; bytearray is mutable.",
    "How do you create a generator in Python?": "Use a function with the 'yield' keyword.",
    "What is the difference between range() and xrange()?": "range() returns a list; xrange() returns an iterator (Python 2 only).",
    "What is the difference between extend() and append()?": "extend() adds elements from another list; append() adds a single element.",
    "What is the difference between == and is in Python?": "== compares values; 'is' compares object identity.",
    "How do you define a class in Python?": "Use the 'class' keyword followed by the class name.",
    "How do you create an instance of a class in Python?": "Use the class name followed by parentheses: obj = MyClass().",
    "What is the difference between static and instance variables?": "Static variables are shared among all instances; instance variables are unique to each instance.",
    "What is a Python metaclass?": "A metaclass defines how a class behaves.",
    "What is the difference between __init__ and __del__?": "__init__ initializes an object; __del__ is called when an object is deleted.",
    "How do you create a lambda function?": "Use the lambda keyword: lambda x: x * 2.",
    "What is the difference between map() and filter()?": "map() applies a function to all elements; filter() returns elements that match a condition.",
    "How do you handle exceptions in Python?": "Use the try-except block.",
    "What is the difference between finally and else in exception handling?": "finally executes no matter what; else executes if no exception occurs.",
    "What is a Python closure?": "A closure is a function that retains access to variables from its lexical scope.",
    "How do you create an empty dictionary?": "Use {} or dict().",
    "What is the difference between json.dump() and json.dumps()?": "dump() writes to a file; dumps() returns a JSON string.",
    "How do you convert a string to an integer?": "Use the int() function.",
    "What is a Python namedtuple?": "namedtuple is a subclass of tuple that allows you to access values using names.",
    "How do you remove an item from a dictionary?": "Use the pop() method or the del keyword.",
    "What is the difference between __str__ and __repr__?": "__str__ is for user-friendly output; __repr__ is for developer-friendly output.",
    "What is the purpose of the 'in' operator?": "The 'in' operator checks for membership in a sequence.",
    "What is the difference between while and for loops?": "while loops execute based on a condition; for loops iterate over a sequence.",
    "What is a Python set?": "A set is an unordered collection of unique elements.",
    "How do you check if a set contains an element?": "Use the 'in' operator.",
    "What is a Python frozenset?": "A frozenset is an immutable set.",
    "What is the difference between open() and os.open()?": "open() is for high-level file operations; os.open() is for low-level file operations.",
    "What is the difference between a package and a module?": "A module is a single file; a package is a collection of modules.",
    "How do you define a constant in Python?": "Use uppercase letters and underscore: MY_CONSTANT = 100.",
    "What is the difference between next() and iter()?": "iter() creates an iterator; next() retrieves the next element.",
    "What is the purpose of the __name__ variable?": "__name__ stores the name of the current module.",
    "What is the difference between eval() and exec()?": "eval() evaluates an expression; exec() executes a statement.",
    "What is the purpose of the id() function in Python?": "The id() function returns the unique identifier for an object.",
    "How do you create an alias for a module in Python?": "Use the 'as' keyword: import numpy as np.",
    "What is the difference between sorted() and sort()?": "sorted() returns a new sorted list; sort() sorts in place.",
    "What is the difference between a classmethod and a staticmethod?": "classmethod takes cls as a parameter; staticmethod does not take cls.",
    "What is a Python virtual environment?": "A virtual environment isolates Python packages from the system installation.",
    "How do you install a package in Python?": "Use the pip command: pip install package_name.",
    "What is a Python wheel file?": "A wheel file is a binary package format for Python distributions.",
    "What is the difference between pip and conda?": "pip is the Python package manager; conda is used for managing Python environments and dependencies.",
    "What is the purpose of the __slots__ attribute?": "__slots__ restricts the attributes that an object can have.",
    "How do you get the length of a list in Python?": "Use the len() function.",
    "What is the difference between @staticmethod and @classmethod?": "@staticmethod does not require cls; @classmethod requires cls.",
    "How do you define a private variable in Python?": "Prefix the variable name with an underscore: _my_variable.",
    "What is a Python deque?": "A deque is a double-ended queue provided by the collections module.",
    "What is the purpose of the os module in Python?": "The os module provides functions for interacting with the operating system.",
    "How do you rename a file in Python?": "Use the os.rename() function.",
    "What is the purpose of the time.sleep() function?": "The time.sleep() function pauses execution for a specified number of seconds.",
    "What is the difference between re.match() and re.search()?": "match() checks at the beginning of a string; search() checks anywhere in the string.",
    "How do you compile a regular expression in Python?": "Use the re.compile() function.",
    "What is the difference between re.split() and re.findall()?": "split() splits a string based on a pattern; findall() returns all matches.",
    "How do you create a thread in Python?": "Use the threading.Thread class.",
    "What is the purpose of the join() method in threading?": "The join() method waits for a thread to finish execution.",
    "How do you create a daemon thread in Python?": "Set the daemon attribute to True: thread.daemon = True.",
    "What is the difference between a process and a thread?": "A process is an independent program; a thread is a lightweight process within a program.",
    "How do you terminate a thread in Python?": "Use the _stop() method or set a flag.",
    "What is the Global Interpreter Lock (GIL)?": "The GIL prevents multiple threads from executing Python bytecodes at once.",
    "How do you create a multiprocessing pool?": "Use multiprocessing.Pool().",
    "What is the purpose of the queue module in Python?": "The queue module provides a way to handle multithreading-safe queues.",
    "What is the difference between a pipe and a queue?": "A pipe allows two-way communication; a queue is thread-safe and allows multiple producers and consumers.",
    "What is the purpose of the signal module in Python?": "The signal module provides functions for handling system signals.",
    "What is the difference between __getattr__ and __getattribute__?": "__getattr__ is called when an attribute is not found; __getattribute__ is called for every attribute access.",
    "What is the purpose of the sys module in Python?": "The sys module provides access to system-specific parameters and functions.",
    "What is the purpose of the sys.argv list?": "sys.argv stores command-line arguments passed to a script.",
    "What is the difference between os.path and pathlib?": "os.path provides legacy path manipulation; pathlib provides object-oriented path manipulation.",
    "How do you get the current working directory in Python?": "Use os.getcwd().",
    "How do you change the current working directory?": "Use os.chdir(path).",
    "How do you list files in a directory?": "Use os.listdir(path).",
    "What is the difference between os.mkdir() and os.makedirs()?": "os.mkdir() creates a single directory; os.makedirs() creates nested directories.",
    "How do you delete a file in Python?": "Use os.remove().",
    "What is the purpose of the shutil module?": "The shutil module provides functions for file operations such as copying and moving.",
    "How do you copy a file in Python?": "Use shutil.copy().",
    "How do you move a file in Python?": "Use shutil.move().",
    "What is the purpose of the tempfile module?": "The tempfile module creates temporary files and directories.",
    "How do you create a temporary file in Python?": "Use tempfile.TemporaryFile().",
    "What is the difference between os.path.exists() and os.path.isfile()?": "exists() checks if a path exists; isfile() checks if a path is a file.",
    "What is the purpose of the json module?": "The json module provides functions for working with JSON data.",
    "How do you convert a JSON string to a Python dictionary?": "Use json.loads().",
    "How do you convert a Python dictionary to a JSON string?": "Use json.dumps().",
    "What is the purpose of the csv module?": "The csv module provides functions for working with CSV files.",
    "How do you read a CSV file in Python?": "Use the csv.reader() function.",
    "How do you write to a CSV file in Python?": "Use the csv.writer() function.",
    "What is the purpose of the sqlite3 module?": "The sqlite3 module provides an interface for SQLite databases.",
    "How do you create a SQLite database in Python?": "Use sqlite3.connect('database.db').",
    "How do you execute an SQL query in Python?": "Use the execute() method of a cursor object.",
    "How do you create a table in SQLite using Python?": "Use the 'CREATE TABLE' statement with the execute() method of a cursor object.",
    "How do you insert data into a SQLite table?": "Use the 'INSERT INTO' statement with the execute() method of a cursor object.",
    "How do you select data from a SQLite table?": "Use the 'SELECT' statement with the execute() method of a cursor object.",
    "How do you update data in a SQLite table?": "Use the 'UPDATE' statement with the execute() method of a cursor object.",
    "How do you delete data from a SQLite table?": "Use the 'DELETE' statement with the execute() method of a cursor object.",
    "What is the purpose of the 'commit()' method in SQLite?": "The commit() method saves changes made to the database.",
    "What is the purpose of the 'rollback()' method in SQLite?": "The rollback() method undoes changes since the last commit.",
    "How do you close a SQLite connection in Python?": "Use the close() method of the connection object.",
    "What is the difference between fetchone(), fetchall(), and fetchmany()?": "fetchone() returns one row; fetchall() returns all rows; fetchmany() returns a specified number of rows.",
    "How do you create a new thread using the threading module?": "Use threading.Thread(target=function).start().",
    "What is the difference between daemon threads and normal threads?": "Daemon threads run in the background; normal threads block the program until they complete.",
    "What is the purpose of the enumerate() function in Python?": "The enumerate() function adds a counter to an iterable.",
    "How do you check the data type of a variable in Python?": "Use the type() function.",
    "What is the difference between isinstance() and type()?": "isinstance() checks for inheritance; type() checks the exact type.",
    "What is the purpose of the issubclass() function?": "The issubclass() function checks if a class is a subclass of another class.",
    "What is the purpose of the hasattr() function?": "The hasattr() function checks if an object has a specific attribute.",
    "How do you add a method to a class dynamically in Python?": "Use the setattr() function.",
    "What is a Python super() function?": "super() calls a method from a parent class.",
    "What is the purpose of the @dataclass decorator?": "The @dataclass decorator automatically generates special methods like __init__() and __repr__().",
    "How do you create a dataclass in Python?": "Use the @dataclass decorator and define the class attributes.",
    "What is the difference between static typing and dynamic typing?": "Static typing requires type declarations; dynamic typing determines types at runtime.",
    "How do you use type hints in Python?": "Use the '->' syntax after the function definition.",
    "What is the purpose of the typing module in Python?": "The typing module provides support for type hints.",
    "How do you create a generator expression?": "Use parentheses instead of square brackets: (x for x in range(10)).",
    "What is the purpose of the any() function?": "The any() function returns True if any element in an iterable is true.",
    "What is the purpose of the all() function?": "The all() function returns True if all elements in an iterable are true.",
    "How do you create a memoryview object in Python?": "Use the memoryview() function.",
    "What is the difference between @staticmethod and @property?": "@staticmethod defines a static method; @property defines a getter method.",
    "What is the purpose of the __new__ method in Python?": "__new__ creates a new instance of a class.",
    "What is the difference between shallow copy and deep copy?": "Shallow copy copies references; deep copy creates independent objects.",
    "What is the difference between None and null?": "None is Python's equivalent of null in other languages.",
    "What is the purpose of the Ellipsis object in Python?": "Ellipsis is used as a placeholder in slices or incomplete code.",
    "What is a Python frozen set?": "A frozen set is an immutable set.",
    "What is the difference between zip() and map()?": "zip() combines iterables into tuples; map() applies a function to elements.",
    "What is the difference between __doc__ and help()?": "__doc__ shows the docstring; help() shows interactive help.",
    "What is a Python metaclass?": "A metaclass defines how classes are created.",
    "How do you access a class attribute in Python?": "Use the class name or an instance: MyClass.attribute.",
    "What is the difference between global and nonlocal?": "global refers to the module-level scope; nonlocal refers to the nearest enclosing scope.",
    "What is the difference between a module and a script?": "A module is imported; a script is executed directly.",
    "How do you make a Python script executable on Unix?": "Add a shebang line: #!/usr/bin/env python3 and set executable permissions.",
    "How do you define a decorator in Python?": "Define a function that takes a function as an argument and returns a function.",
    "What is the purpose of the functools.wraps() decorator?": "The functools.wraps() decorator preserves the metadata of the wrapped function.",
    "How do you use a context manager with a class?": "Define __enter__ and __exit__ methods in the class.",
    "What is the purpose of the io module in Python?": "The io module provides functions for working with streams and files.",
    "How do you create a binary file in Python?": "Open the file in 'wb' mode.",
    "What is the difference between text mode and binary mode?": "Text mode handles strings; binary mode handles bytes.",
    "What is the purpose of the pickle module?": "The pickle module serializes and deserializes Python objects.",
    "How do you pickle an object in Python?": "Use the pickle.dump() method.",
    "How do you unpickle an object in Python?": "Use the pickle.load() method.",
    "What is the difference between dumps() and dump() in pickle?": "dumps() returns a string; dump() writes to a file.",
    "How do you create a temporary file using the tempfile module?": "Use tempfile.TemporaryFile().",
    "How do you create a named temporary file in Python?": "Use tempfile.NamedTemporaryFile().",
    "What is the difference between a set and a frozenset?": "A set is mutable; a frozenset is immutable.",
    "How do you create a named tuple in Python?": "Use collections.namedtuple().",
    "What is the purpose of the Counter class in Python?": "Counter counts the occurrences of elements in a collection.",
    "How do you get the most common elements using Counter?": "Use the most_common() method.",
    "What is the purpose of the defaultdict class in Python?": "defaultdict provides a default value for missing keys.",
    "How do you create a defaultdict with a list as the default?": "Use defaultdict(list).",
    "What is the purpose of the OrderedDict class?": "OrderedDict maintains the order of keys.",
    "What is the difference between an OrderedDict and a regular dictionary?": "OrderedDict maintains order; regular dicts do not guarantee order (before Python 3.7).",
    "What is the purpose of the ChainMap class?": "ChainMap groups multiple dictionaries into one.",
    "How do you access keys in a ChainMap?": "Use the keys() method.",
    "What is the purpose of the namedtuple class in Python?": "namedtuple creates tuple-like objects with named fields.",
    "How do you create an empty set in Python?": "Use set(), not {} (which creates a dictionary).",
    "What is the purpose of the frozenset class in Python?": "frozenset creates an immutable set.",
    "How do you create an empty dictionary in Python?": "Use {} or dict().",
    "How do you create an empty list in Python?": "Use [] or list().",
    "How do you create an empty tuple in Python?": "Use () or tuple().",
    "What is the purpose of the __call__ method in Python?": "__call__ allows an object to be called like a function.",
    "How do you check if an object is callable in Python?": "Use the callable() function.",
    "What is the difference between @classmethod and @staticmethod?": "@classmethod requires a cls parameter; @staticmethod does not.",
    "What is the difference between a class and an instance?": "A class defines a blueprint; an instance is an object created from that blueprint.",
    "What is a singleton in Python?": "A singleton is a class with only one instance.",
    "How do you create a singleton in Python?": "Override the __new__ method to ensure only one instance is created.",
    "What is the purpose of the __del__ method in Python?": "__del__ is called when an object is garbage collected.",
    "What is the purpose of the gc module in Python?": "The gc module controls garbage collection.",
    "How do you force garbage collection in Python?": "Use gc.collect().",
    "What is a context manager in Python?": "A context manager handles resource management using the 'with' statement.",
    "How do you create a custom context manager?": "Define __enter__ and __exit__ methods in a class.",
    "What is the purpose of the __enter__ method?": "__enter__ sets up a resource and returns it.",
    "What is the purpose of the __exit__ method?": "__exit__ releases the resource.",
    "What is the purpose of the with statement in Python?": "The with statement simplifies resource management.",
    "What is the purpose of the abc module in Python?": "The abc module allows defining abstract base classes.",
    "How do you create an abstract class in Python?": "Use the @abstractmethod decorator inside a class inheriting from ABC.",
    "What is the difference between an abstract class and an interface?": "Abstract classes can have concrete methods; interfaces cannot.",
    "How do you check if a class is a subclass of another class?": "Use issubclass().",
    "How do you check if an object is an instance of a class?": "Use isinstance().",
    "What is the purpose of the inspect module in Python?": "The inspect module allows introspection of live objects.",
    "What is the purpose of the eval() function in Python?": "eval() evaluates a string as Python code.",
    "What is the purpose of the exec() function in Python?": "exec() executes a string as Python code.",
    "What is the difference between eval() and exec()?": "eval() returns a value; exec() executes code but does not return a value.",
    "What is the purpose of the repr() function in Python?": "repr() returns a string representation of an object.",
    "What is the purpose of the ascii() function in Python?": "ascii() returns a string representation of an object with non-ASCII characters escaped.",
    "What is the difference between str() and repr()?": "str() returns a readable string; repr() returns a string for debugging.",
    "How do you convert a string to uppercase in Python?": "Use the upper() method.",
    "How do you convert a string to lowercase in Python?": "Use the lower() method.",
    "How do you capitalize the first letter of a string in Python?": "Use the capitalize() method.",
    "How do you convert a string to title case in Python?": "Use the title() method.",
    "How do you check if a string starts with a specific substring?": "Use the startswith() method.",
    "How do you check if a string ends with a specific substring?": "Use the endswith() method.",
    "How do you split a string into a list of substrings?": "Use the split() method.",
    "How do you join a list of strings into a single string?": "Use the join() method.",
    "What is the purpose of the strip() method in Python?": "strip() removes whitespace from both ends of a string.",
};

@app.route("/")
def home():
    return render_template("index1.html")

@app.route("/get_response", methods=["POST"])
def get_response():
    data = request.get_json()
    question = data.get("question", "").strip()
    
    # Check if question exists in predefined database
    response = qaDatabase.get(question, "I'm sorry, I don't have an answer for that question.")
    
    return jsonify({"response": response})

if __name__ == "__main__":
    app.run(debug=True)
